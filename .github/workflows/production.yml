name: Production Deployment

on:
  push:
    branches: [main]
    tags:
      - 'v*'  # Deploy on version tags

env:
  PYTHON_VERSION: "3.12"

jobs:
  # Security audit before production
  security-audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install audit tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit safety bandit[toml]
          
      - name: Run pip audit
        run: |
          pip install -e .
          pip-audit --desc
        continue-on-error: false  # Fail on vulnerabilities
          
      - name: Run safety check
        run: |
          safety check
        continue-on-error: false
          
      - name: Run bandit security scan
        run: |
          bandit -r src/ -ll

  # Validate clinical accuracy
  clinical-validation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,ml]"
          
      - name: Run clinical validation tests
        run: |
          pytest tests/ -m clinical -v --tb=short
          
      - name: Validate Seoul feature schema
        run: |
          python scripts/assert_feature_schema.py

  # Full regression test suite
  regression-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]  # Can add more versions for production
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install all dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,ml,monitoring,agents]"
          pip install torch==2.5.1+cpu --index-url https://download.pytorch.org/whl/cpu
          pip install tensorflow>=2.14.0
          
      - name: Run complete test suite
        run: |
          pytest -v --tb=short --cov=big_mood_detector --cov-report=xml
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

  # Build production Docker image
  build-production:
    runs-on: ubuntu-latest
    needs: [security-audit, clinical-validation, regression-tests]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Docker Hub
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name == 'push' }}
          tags: |
            bigmooddetector/api:latest
            bigmooddetector/api:${{ github.sha }}
            bigmooddetector/api:${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Create GitHub release
  create-release:
    runs-on: ubuntu-latest
    needs: [build-production]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            Production release ${{ github.ref_name }}
            
            Docker image: `bigmooddetector/api:${{ github.ref_name }}`
            
            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
          draft: false
          prerelease: false

  # Deploy to production (placeholder)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-production]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production  # Requires manual approval
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          echo "Image: bigmooddetector/api:${{ github.sha }}"
          # Add actual deployment steps here