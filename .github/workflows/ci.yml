name: CI

on:
  push:
    branches: [main, development]
  pull_request:
    branches: [main, development]

env:
  PYTHON_VERSION: "3.12"
  
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff mypy
          
      - name: Run Ruff
        run: ruff check src tests
        
      - name: Run MyPy
        run: mypy src --ignore-missing-imports

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]  # Requires Python 3.12+ (see pyproject.toml)
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          
      - name: Run tests (fast)
        run: |
          pytest tests/unit -v --tb=short -m "not slow and not large and not slow_finetune"
          
      - name: Upload coverage
        if: matrix.python-version == '3.12'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  api-smoke-test:
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          # Install TensorFlow for ensemble test
          pip install tensorflow>=2.14.0
          
      - name: Start API server
        run: |
          uvicorn big_mood_detector.interfaces.api.main:app --host 0.0.0.0 --port 8000 &
          sleep 10  # Wait for startup
          
      - name: Test API endpoints
        run: |
          # Check health
          curl -f http://localhost:8000/health
          
          # Check model status
          curl -f http://localhost:8000/api/v1/predictions/status
          
          # Test basic prediction
          curl -f -X POST http://localhost:8000/api/v1/predictions/predict \
            -H "Content-Type: application/json" \
            -d '{"sleep_duration": 7.5, "sleep_efficiency": 0.85, "sleep_timing_variance": 30.0, "daily_steps": 8000, "activity_variance": 150.0, "sedentary_hours": 8.0}'
          
          # Test ensemble prediction
          curl -f -X POST http://localhost:8000/api/v1/predictions/predict/ensemble \
            -H "Content-Type: application/json" \
            -d '{"sleep_duration": 7.5, "sleep_efficiency": 0.85, "sleep_timing_variance": 30.0, "daily_steps": 8000, "activity_variance": 150.0, "sedentary_hours": 8.0}'

  security-scan:
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install pip-audit
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit
          
      - name: Generate requirements
        run: |
          pip install pip-tools
          pip-compile pyproject.toml -o requirements.txt
          
      - name: Run security audit
        run: |
          pip-audit -r requirements.txt --desc
        continue-on-error: true  # Don't fail build, just report

  docker-build:
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: big-mood-detector:test
          cache-from: type=gha
          cache-to: type=gha,mode=max