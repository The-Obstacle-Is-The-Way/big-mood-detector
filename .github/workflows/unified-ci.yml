name: Unified CI

on:
  push:
    branches: [development, staging, main]
  pull_request:
    branches: [development, staging, main]

env:
  PYTHON_VERSION: "3.12"
  MYPY_VERSION: "1.15.0"

jobs:
  # ALWAYS RUN: Core quality checks
  lint-and-type:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          # Ensure exact MyPy version
          pip install mypy==${{ env.MYPY_VERSION }}
          
      - name: Run Ruff
        run: ruff check src tests
        
      - name: Run MyPy
        run: make type-check

  # ALWAYS RUN: Unit tests
  test-unit:
    runs-on: ubuntu-latest
    needs: [lint-and-type]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install torch==2.5.1+cpu --index-url https://download.pytorch.org/whl/cpu
          
      - name: Run unit tests
        run: |
          pytest tests/unit -v --tb=short -m "not slow and not large and not slow_finetune and not performance" -p no:timeout -o addopts=""
          
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  # ALWAYS RUN: Repository cleanliness
  check-clean:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check for stray directories
        run: |
          set -e  # Exit on any error
          
          # Check that no health data directories with content exist in root
          found_stray=0
          for dir in apple_export health_auto_export; do
            if [ -d "$dir" ] && [ -n "$(ls -A "$dir" 2>/dev/null)" ]; then
              if [ $found_stray -eq 0 ]; then
                echo "❌ ERROR: Stray health data directories with content found in root!"
                echo "These should only exist in data/input/"
                found_stray=1
              fi
              echo "Contents of $dir:"
              ls -la "$dir"
            fi
          done
          
          if [ $found_stray -eq 1 ]; then
            exit 1
          fi
          
          # Check that no output files are in root
          if ls *_predictions.csv *_clinical_report.txt *.summary.json 2>/dev/null; then
            echo "❌ ERROR: Output files found in root!"
            echo "All outputs should be in data/output/"
            exit 1
          fi
          
          # Check for large files
          large_files=$(find . -type f -size +1M | grep -v -E '(\.git/|model_weights/|literature/|data/)')
          if [ ! -z "$large_files" ]; then
            echo "❌ ERROR: Large files found outside allowed directories:"
            echo "$large_files"
            exit 1
          fi
          
          echo "✅ Repository is clean"

  # ALWAYS RUN: Docker compatibility
  docker-build:
    runs-on: ubuntu-latest
    needs: [lint-and-type]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: big-mood-detector:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ALWAYS RUN: Alpine compatibility (catches common issues)
  alpine-compatibility:
    runs-on: ubuntu-latest
    needs: [lint-and-type]
    steps:
      - uses: actions/checkout@v4
      
      - name: Build Alpine test image
        run: |
          cat > Dockerfile.alpine <<EOF
          FROM python:3.12-alpine
          RUN apk add --no-cache \
            gcc g++ musl-dev linux-headers \
            libffi-dev openssl-dev \
            libxml2-dev libxslt-dev \
            postgresql-dev \
            tzdata \
            make cmake \
            gfortran openblas-dev lapack-dev
          WORKDIR /app
          COPY pyproject.toml ./
          COPY README.md ./
          COPY src/ ./src/
          # Install in stages to catch issues
          RUN pip install --no-cache-dir wheel setuptools
          RUN pip install --no-cache-dir numpy  # Often fails on Alpine
          # Install XGBoost without CUDA dependencies for Alpine
          RUN pip install --no-cache-dir xgboost-cpu==2.1.3
          RUN pip install --no-cache-dir -e .
          RUN pip install --no-cache-dir pytest pytest-asyncio
          EOF
          
          docker build -f Dockerfile.alpine -t big-mood-alpine:test .
      
      - name: Test basic imports
        run: |
          docker run --rm big-mood-alpine:test \
            python -c "from big_mood_detector.main import main; print('✅ Import successful')"

  # RUN ON: staging, main, or when labeled
  integration-tests:
    runs-on: ubuntu-latest
    needs: [test-unit]
    if: |
      github.ref == 'refs/heads/staging' || 
      github.ref == 'refs/heads/main' || 
      contains(github.event.pull_request.labels.*.name, 'run-integration')
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,ml,monitoring]"
          
      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://postgres:test@localhost/test
          REDIS_URL: redis://localhost:6379
        run: |
          pytest tests/integration -v --tb=short

  # RUN ON: staging only (expensive)
  performance-tests:
    runs-on: ubuntu-latest
    needs: [test-unit]
    if: github.ref == 'refs/heads/staging'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,ml]"
          pip install torch==2.5.1+cpu --index-url https://download.pytorch.org/whl/cpu
          
      - name: Run performance benchmarks
        run: |
          # Run with relaxed thresholds for CI environment
          pytest tests/performance -v --benchmark-only --benchmark-disable-gc || true
          
      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: .benchmarks/

  # RUN ON: main only
  security-audit:
    runs-on: ubuntu-latest
    needs: [test-unit]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install audit tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit safety bandit[toml]
          
      - name: Run security scans
        run: |
          pip-audit --desc || true  # Warning only
          safety check || true      # Warning only
          bandit -r src/ -ll        # Fail on high severity

  # Summary job for branch protection
  ci-summary:
    runs-on: ubuntu-latest
    needs: [lint-and-type, test-unit, check-clean, docker-build, alpine-compatibility]
    if: always()
    steps:
      - name: Summary
        run: |
          echo "CI Summary:"
          echo "- Lint & Type: ${{ needs.lint-and-type.result }}"
          echo "- Unit Tests: ${{ needs.test-unit.result }}"
          echo "- Clean Check: ${{ needs.check-clean.result }}"
          echo "- Docker Build: ${{ needs.docker-build.result }}"
          echo "- Alpine Compat: ${{ needs.alpine-compatibility.result }}"
          
          # Fail if any required job failed
          if [[ "${{ needs.lint-and-type.result }}" != "success" ]] || \
             [[ "${{ needs.test-unit.result }}" != "success" ]] || \
             [[ "${{ needs.check-clean.result }}" != "success" ]] || \
             [[ "${{ needs.docker-build.result }}" != "success" ]] || \
             [[ "${{ needs.alpine-compatibility.result }}" != "success" ]]; then
            echo "❌ CI Failed"
            exit 1
          fi
          
          echo "✅ CI Passed"