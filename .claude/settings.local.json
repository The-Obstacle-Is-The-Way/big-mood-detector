{
  "permissions": {
    "allow": [
      "Bash(git fetch:*)",
      "Bash(ls:*)",
      "Bash(python:*)",
      "Bash(git config:*)",
      "Bash(git checkout:*)",
      "Bash(rm:*)",
      "Bash(pip3:*)",
      "Bash(source:*)",
      "Bash(pip install:*)",
      "Bash(sudo apt:*)",
      "Bash(git pull:*)",
      "Bash(git reset:*)",
      "Bash(pip show:*)",
      "Bash(mkdir:*)",
      "Bash(tar:*)",
      "Bash(cp:*)",
      "Bash(find:*)",
      "Bash(pip --version)",
      "Bash(touch:*)",
      "Bash(chmod:*)",
      "Bash(export CUDA_VISIBLE_DEVICES=0)",
      "Bash(export:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(tmux list-sessions:*)",
      "Bash(tmux kill-session:*)",
      "Bash(true)",
      "Bash(./scripts/launch_pat_training_gpu.sh:*)",
      "Bash(dos2unix:*)",
      "Bash(sed:*)",
      "Bash(nvidia-smi:*)",
      "Bash(tmux new-session:*)",
      "Bash(tmux capture-pane:*)",
      "Bash(./scripts/launch_paper_exact_training.sh:*)",
      "Bash(tmux ls:*)",
      "Bash(./scripts/launch_pat_l_ft_now.sh:*)",
      "Bash(./scripts/launch_pat_l_optimized.sh:*)",
      "Bash(./scripts/launch_pat_l_final.sh:*)",
      "Bash(grep:*)",
      "Bash(./scripts/launch_pat_corrected.sh:*)",
      "Bash(tmux send-keys:*)",
      "Bash(mv:*)",
      "Bash(./scripts/launch_pat_higher_lr.sh:*)",
      "Bash(strace:*)",
      "Bash(top:*)",
      "Bash(tmux kill-server:*)",
      "Bash(./make-wsl.sh lint:*)",
      "Bash(make lint:*)",
      "Bash(ruff check:*)",
      "Bash(make:*)",
      "Bash(mypy:*)",
      "Bash(pytest:*)",
      "Bash(tree:*)",
      "Bash(git tag:*)",
      "Bash(# Move setup/migration docs\nmv SETUP_GUIDE.md DATA_SETUP_GUIDE.md DOCKER_SETUP_GUIDE.md PC_MIGRATION_CHECKLIST.md docs/setup/\n\n# Move development docs  \nmv DEPLOYMENT_READINESS.md DATA_FILES_MANIFEST.md docs/deployment/\n\n# Move temporary/old docs\nmv CLEANUP_REPORT.md PAT_DEPRESSION_TRAINING.md docs/archive/\n\n# Keep in root (these are essential)\n# - CLAUDE.md (AI guide)\n# - README.md (main documentation)\n# - CONTRIBUTING.md (standard)\n# - LICENSE (legal requirement)\n# - CHANGELOG.md (standard)\n# - ROADMAP_TO_MVP_V1.0.md (current work)\n# - pyproject.toml, Makefile, etc (build files)\n\necho \"\"âœ… Moved documentation files\"\")",
      "Bash(git filter-branch:*)",
      "Bash(for file in \"PAT_DEPRESSION_TRAINING.md\" \"tests/\" \"htmlcov/\" \"pyproject.toml\" \"LICENSE\" \"docs/clinical/README.md\" \"docs/user/QUICK_START_GUIDE.md\" \"docs/developer/ARCHITECTURE_OVERVIEW.md\" \"docs/performance/OPTIMIZATION_TRACKING.md\" \"docs/user/README.md\" \"CONTRIBUTING.md\" \"CLAUDE.md\")",
      "Bash(do)",
      "Bash(if [ -e \"$file\" ])",
      "Bash(then)",
      "Bash(echo:*)",
      "Bash(else)",
      "Bash(fi)",
      "Bash(done)",
      "Bash(gh release create:*)",
      "Bash(git check-ignore:*)",
      "Bash(.venv-wsl/bin/pytest tests/unit/domain/services/test_pat_predictor_interface.py -xvs)",
      "Bash(.venv-wsl/bin/pytest tests/unit/ -n auto --timeout=30)",
      "Bash(.venv-wsl/bin/pytest tests/unit/ -n auto)",
      "Bash(.venv-wsl/bin/pytest tests/unit/domain/ -v --durations=10)",
      "Bash(.venv-wsl/bin/pip install:*)",
      "Bash(.venv-wsl/bin/pytest tests/unit/ --durations=25 -n auto)",
      "Bash(.venv-wsl/bin/pytest tests/unit/infrastructure/ml_models/ --durations=10 -v)",
      "Bash(.venv-wsl/bin/pytest tests/unit/infrastructure/ml_models/test_pat_depression_head.py -xvs)",
      "Bash(.venv-wsl/bin/pytest tests/unit/ -k \"not (heavy or large or slow_finetune)\" --durations=25 -n 4)",
      "Bash(.venv-wsl/bin/pytest tests/unit/ -k \"not (heavy or large or slow_finetune or performance)\" --tb=no -q)",
      "Bash(.venv-wsl/bin/pytest -m \"not slow and not integration and not slow_finetune and not e2e\" -x --tb=short)",
      "Bash(.venv-wsl/bin/pytest tests/unit/ -x --tb=short -q)",
      "Bash(git merge:*)",
      "Bash(.venv-wsl/bin/pytest tests/integration/test_orchestrator_integration.py::TestOrchestratorIntegration::test_orchestrator_validation_detects_missing_data -xvs)",
      "Bash(.venv-wsl/bin/pytest tests/integration/ -n auto --tb=short -q)",
      "Bash(.venv-wsl/bin/pytest tests/integration/data_processing/test_end_to_end_data_processing.py -x --tb=short)",
      "Bash(.venv-wsl/bin/pytest tests/integration/data_processing/test_end_to_end_data_processing.py::TestEndToEndDataProcessing::test_xml_processing_end_to_end -xvs)",
      "Bash(.venv-wsl/bin/pytest tests/unit/ -x --tb=no -q --co)",
      "Bash(.venv-wsl/bin/pytest tests/unit/ -k \"not (heavy or large or slow_finetune or performance)\" --tb=no -q)",
      "Bash(.venv-wsl/bin/pytest tests/unit/ --cov=big_mood_detector --cov-report=term-missing --no-cov-on-fail -q)",
      "Bash(.venv-wsl/bin/pytest tests/integration/data_processing/test_end_to_end_data_processing.py::TestEndToEndDataProcessing::test_xml_processing_end_to_end -xvs -k \"xml\" --capture=no)",
      "Bash(.venv-wsl/bin/pytest tests/integration/data_processing/test_end_to_end_data_processing.py::TestEndToEndDataProcessing::test_feature_aggregation_accuracy -xvs)",
      "Bash(.venv-wsl/bin/python test_debug_integration.py:*)",
      "Bash(.venv-wsl/bin/pytest tests/integration/data_processing/ -x --tb=short -q)",
      "Bash(.venv-wsl/bin/pytest tests/integration/data_processing/test_end_to_end_data_processing.py::TestEndToEndDataProcessing::test_json_processing_end_to_end -xvs)",
      "Bash(.venv-wsl/bin/pytest tests/integration/ -x --tb=short -q)",
      "Bash(.venv-wsl/bin/python:*)",
      "Bash(.venv-wsl/bin/pytest tests/integration/data_processing/test_real_xml_processing.py -xvs)",
      "Bash(.venv-wsl/bin/pytest tests/integration/data_processing/test_real_xml_processing.py::TestRealXMLProcessing::test_real_xml_processes_without_errors -xvs)",
      "Bash(.venv-wsl/bin/ruff check src/ tests/ --fix)",
      "Bash(TESTING=1 pytest tests/unit/interfaces/api/test_depression_endpoint.py::TestDepressionPredictionEndpoint::test_depression_prediction_endpoint_exists -v)",
      "Bash(TESTING=1 pytest tests/unit/application/use_cases/test_process_health_data_use_case.py::TestMoodPredictionPipeline::test_process_apple_health_xml -v -s)",
      "Bash(TESTING=1 pytest tests/unit/application/use_cases/test_process_health_data_use_case.py -v)",
      "Bash(TESTING=1 python -m pytest tests/unit/application/use_cases/test_process_health_data_use_case.py::TestMoodPredictionPipeline::test_process_apple_health_xml -xvs)",
      "Bash(TESTING=1 pytest -m \"not slow\" --tb=short -q)",
      "Bash(TESTING=1 pytest -m \"not slow\" -x --tb=short)",
      "Bash(TESTING=1 timeout 30 pytest -m \"not slow\" --co -q)",
      "Bash(timeout:*)",
      "Bash(TESTING=1 python -m trace --trace -C . big_mood_detector/infrastructure/ml_models/xgboost_models.py)",
      "Bash(TESTING=1 pytest tests/integration/ml/ -v --tb=short)",
      "Bash(gh issue close:*)",
      "Bash(gh issue comment:*)",
      "Bash(git branch:*)",
      "Bash(gh issue list:*)",
      "Bash(gh issue create:*)",
      "Bash(gh issue edit:*)",
      "Bash(git clone:*)"
    ],
    "deny": []
  }
}