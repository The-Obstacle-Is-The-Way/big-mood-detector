[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatchling.build.targets.wheel]
packages = ["src/big_mood_detector"]
exclude = ["reference_repos"]

[project]
name = "big-mood-detector"
version = "0.1.0"
description = "Clinical-grade bipolar mood detection backend using Apple HealthKit data"
authors = [{name = "The-Obstacle-Is-The-Way", email = "The-Obstacle-Is-The-Way@users.noreply.github.com"}]
license = {text = "Apache-2.0"}
readme = "README.md"
requires-python = ">=3.12"
keywords = ["bipolar", "mood-detection", "healthkit", "clinical", "ai"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Healthcare Industry",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
]

dependencies = [
    # Web Framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # ML/Data Science Core
    "scikit-learn>=1.3.0",
    "xgboost>=2.0.0",
    "pandas>=2.1.0",
    "numpy>=1.24.0",
    "tsfresh>=0.20.0",
    
    # Health Data Processing
    "python-dateutil>=2.8.0",
    "pytz>=2023.3",
    "xmltodict>=0.13.0",
    "lxml>=4.9.0",  # Fast XML parsing (20x faster than stdlib)
    "pyarrow>=14.0.0",  # For parquet support
    
    # Database & Storage
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "psycopg2-binary>=2.9.0",
    
    # API & Integration
    "httpx>=0.25.0",
    "requests>=2.31.0",
    "redis>=5.0.0",
    
    # Logging & Monitoring
    "structlog>=23.2.0",
    "prometheus-client>=0.19.0",
    
    # Security (⚠️ SECURITY REVIEW NEEDED BEFORE PRODUCTION ⚠️)
    # TODO(gh-105): python-jose has known CVEs (CVE-2024-33664, CVE-2024-33663) - no fixes available
    # Alternative: pyjwt + cryptography (more secure, actively maintained)
    "pyjwt>=2.8.0",                    # Secure JWT library (maintained)
    "cryptography>=41.0.0",            # Modern crypto primitives
    "passlib[bcrypt]>=1.7.0",
    "python-multipart>=0.0.6",
    "slowapi>=0.1.9",                  # Rate limiting for FastAPI
    "typer>=0.9.0",                    # CLI framework
    "tqdm>=4.66.0",                    # Progress bars
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-mock>=3.10.0",
    "pytest-sugar>=0.9.6",
    "pytest-bdd>=7.0.0",
    "hypothesis>=6.100",  # Property-based testing
    "faker>=18.0.0",
    "black>=23.0.0",
    "ruff>=0.0.260",
    "mypy>=1.3.0",
    
    # Code Quality
    "ruff>=0.1.6",
    "black>=23.11.0", 
    "mypy>=1.7.0",
    "pre-commit>=3.6.0",
    "types-python-dateutil>=2.8.0",  # Type stubs for dateutil
    
    # 🔥 Hot Reload & Development Experience (2025)
    "arel>=0.3.0",         # Browser hot reload for HTML templates
    "watchfiles>=0.21.0",  # High-performance file watching (Rust-based)
    "jurigged>=0.5.0",     # Live code patching for functions
    
    # 🚀 Enhanced Development Tools
    "rich>=13.7.0",        # Beautiful terminal output
    "typer>=0.9.0",        # CLI framework
    
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
]

ml = [
    # Advanced ML (optional for PAT integration)
    "torch>=2.1.0",
    "tensorflow>=2.14.0",
    "transformers>=4.35.0",
]

monitoring = [
    "sentry-sdk[fastapi]>=1.38.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
]

# 🤖 AI Agent Orchestration (2025) - Multi-agent mood analysis pipeline
agents = [
    # Multi-Agent Frameworks
    "langgraph>=0.2.0",         # Graph-based agent workflows (OpenAI compatible)
    "crewai>=0.70.0",          # Simple role-based agent teams
    "pydantic-ai>=0.0.13",     # Type-safe, minimal agents (by Pydantic team)
    "agno>=0.1.0",             # Production-ready agentic memory
    
    # Foundation & Orchestration
    "langchain>=0.3.0",        # LLM framework foundation
    "instructor>=1.6.0",       # Structured LLM outputs (1M+ downloads/month)
    "litellm>=1.45.0",         # Universal LLM API (OpenAI, Anthropic, etc.)
    
    # Agent Tools & Memory
    "chromadb>=0.5.0",         # Vector database for agent memory
    "faiss-cpu>=1.7.0",       # Similarity search for clinical data
]

[project.urls]
Homepage = "https://github.com/clarity-digital-twin/big-mood-detector"
Repository = "https://github.com/clarity-digital-twin/big-mood-detector.git"
Documentation = "https://big-mood-detector.readthedocs.io"

[project.scripts]
big-mood = "big_mood_detector.main:main"

# Ruff Configuration (replaces flake8, isort, etc.)
[tool.ruff]
target-version = "py312"
line-length = 88
extend-exclude = ["reference_repos", "literature"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011", "B018"]

# Black Configuration
[tool.black]
target-version = ['py312']
line-length = 88
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | reference_repos
  | literature
)/
'''

# MyPy Configuration
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = ["reference_repos/", "literature/"]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "pandas.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "scipy.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tensorflow.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "dateutil.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "sklearn.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "xgboost.*"
ignore_missing_imports = true

# Pytest Configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-v --strict-markers --strict-config -m 'not slow_finetune and not large and not heavy' --tb=short"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "slow_finetune: marks tests that do real ML training (deselect with '-m \"not slow_finetune\"')",
    "large: marks tests that require large files (deselect with '-m \"not large\"')",
    "heavy: tests that load real model weights or large data (deselect with '-m \"not heavy\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "ml: marks tests that require ML models",
    "clinical: marks tests for clinical validation",
]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

# Coverage Configuration
[tool.coverage.run]
source = ["src/big_mood_detector"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
]

[tool.coverage.report]
fail_under = 73  # Current coverage level, prevents regression
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
] 